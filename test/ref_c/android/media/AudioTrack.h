/*
 * Copyright (C) 2015 Zhang Rui <bbcallen@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * https://github.com/Bilibili/jni4android
 * This file is automatically generated by jni4android, do not modify.
 */


#ifndef JJK__android_media_AudioTrack__H
#define JJK__android_media_AudioTrack__H

#include "ijksdl/android/jjk/internal/jjk_internal.h"

jobject JJKC_AudioTrack__AudioTrack(JNIEnv *env, jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode);
jobject JJKC_AudioTrack__AudioTrack__catchAll(JNIEnv *env, jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode);
jobject JJKC_AudioTrack__AudioTrack__asGlobalRef__catchAll(JNIEnv *env, jint streamType, jint sampleRateInHz, jint channelConfig, jint audioFormat, jint bufferSizeInBytes, jint mode);
jint JJKC_AudioTrack__getMinBufferSize(JNIEnv *env, jint sampleRateInHz, jint channelConfig, jint audioFormat);
jint JJKC_AudioTrack__getMinBufferSize__catchAll(JNIEnv *env, jint sampleRateInHz, jint channelConfig, jint audioFormat);
jfloat JJKC_AudioTrack__getMaxVolume(JNIEnv *env);
jfloat JJKC_AudioTrack__getMaxVolume__catchAll(JNIEnv *env);
jfloat JJKC_AudioTrack__getMinVolume(JNIEnv *env);
jfloat JJKC_AudioTrack__getMinVolume__catchAll(JNIEnv *env);
jint JJKC_AudioTrack__getNativeOutputSampleRate(JNIEnv *env, jint streamType);
jint JJKC_AudioTrack__getNativeOutputSampleRate__catchAll(JNIEnv *env, jint streamType);
void JJKC_AudioTrack__play(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__play__catchAll(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__pause(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__pause__catchAll(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__stop(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__stop__catchAll(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__flush(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__flush__catchAll(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__release(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__release__catchAll(JNIEnv *env, jobject thiz);
jint JJKC_AudioTrack__write(JNIEnv *env, jobject thiz, jbyteArray audioData, jint offsetInBytes, jint sizeInBytes);
jint JJKC_AudioTrack__write__catchAll(JNIEnv *env, jobject thiz, jbyteArray audioData, jint offsetInBytes, jint sizeInBytes);
jint JJKC_AudioTrack__setStereoVolume(JNIEnv *env, jobject thiz, jfloat leftGain, jfloat rightGain);
jint JJKC_AudioTrack__setStereoVolume__catchAll(JNIEnv *env, jobject thiz, jfloat leftGain, jfloat rightGain);
jint JJKC_AudioTrack__getAudioSessionId(JNIEnv *env, jobject thiz);
jint JJKC_AudioTrack__getAudioSessionId__catchAll(JNIEnv *env, jobject thiz);
jobject JJKC_AudioTrack__getPlaybackParams(JNIEnv *env, jobject thiz);
jobject JJKC_AudioTrack__getPlaybackParams__catchAll(JNIEnv *env, jobject thiz);
jobject JJKC_AudioTrack__getPlaybackParams__asGlobalRef__catchAll(JNIEnv *env, jobject thiz);
void JJKC_AudioTrack__setPlaybackParams(JNIEnv *env, jobject thiz, jobject params);
void JJKC_AudioTrack__setPlaybackParams__catchAll(JNIEnv *env, jobject thiz, jobject params);
int JJK_loadClass__JJKC_AudioTrack(JNIEnv *env);

#define JJK_HAVE__JJKC_AudioTrack

#include "AudioTrack.util.h"

#endif//JJK__android_media_AudioTrack__H
